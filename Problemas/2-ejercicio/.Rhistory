# Tratamiento de los valores NaN en la columna "Age"
dataset$Age = ifelse(is.na(dataset$Age),
# Condición: Verifica si hay valores NA en la columna "Age".
# La función `is.na()` devuelve TRUE para las celdas que contienen NA.
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
# Acción para valores NA: Usa la función `ave()` para calcular la media de la columna "Age".
# `na.rm = TRUE` asegura que los valores NA sean ignorados al calcular la media.
# La media calculada se asignará a las celdas donde `is.na(dataset$Age)` sea TRUE.
dataset$Age)
dataset
load("C:/Users/david/Music/MachingLearning/Problemas/1-ejercicio/Data.csv")
#plantilla para preposesar la base de datos
# importar el dataset
#la posicion empieza de 1 y no en cero en spider
dataset = read.csv('"C:/Users/david/Music/MachingLearning/Problemas/1-ejercicio/Data.csv')
#plantilla para preposesar la base de datos
# importar el dataset
#la posicion empieza de 1 y no en cero en spider
dataset = read.csv('"C:/Users/david/Music/MachingLearning/Problemas/1-ejercicio/Data.csv')
source('C:/Users/david/Music/MachingLearning/Problemas/1-ejercicio/ejercicio.R')
# Tratamiento de los valores NaN en la columna "Age"
dataset$Age = ifelse(is.na(dataset$Age),
# Condición: Verifica si hay valores NA en la columna "Age".
# La función `is.na()` devuelve TRUE para las celdas que contienen NA.
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
# Acción para valores NA: Usa la función `ave()` para calcular la media de la columna "Age".
# `na.rm = TRUE` asegura que los valores NA sean ignorados al calcular la media.
# La media calculada se asignará a las celdas donde `is.na(dataset$Age)` sea TRUE.
dataset$Age)
#plantilla para preposesar la base de datos
# importar el dataset
#la posicion empieza de 1 y no en cero en spider
dataset = read.csv('C:/Users/david/Music/MachingLearning/Problemas/1-ejercicio/Data.csv')
# Tratamiento de los valores NaN en la columna "Age"
dataset$Age = ifelse(is.na(dataset$Age),
# Condición: Verifica si hay valores NA en la columna "Age".
# La función `is.na()` devuelve TRUE para las celdas que contienen NA.
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
# Acción para valores NA: Usa la función `ave()` para calcular la media de la columna "Age".
# `na.rm = TRUE` asegura que los valores NA sean ignorados al calcular la media.
# La media calculada se asignará a las celdas donde `is.na(dataset$Age)` sea TRUE.
dataset$Age)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
View(dataset)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R')
# Ajustar el modelo de regresionj lineal simple con el conjunto de entrenaimiento
regresar = lm(formula = Salary ~ YearsExperience, data = entrenamiento_enviar) #se tiene que parecer las variables del dataset = YearsExperience
view(prueba_enviar)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R')
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
#entranamiento
entrenamiento_enviar = subset(dataset, split ==TRUE)
#entranamiento
entrenamiento_enviar = subset(dataset, split ==TRUE)
#entranamiento
entrenamiento_enviar = subset(dataset, split ==TRUE)
#entranamiento
entrenamiento_enviar = subset(dataset, split ==TRUE)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
load("C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R")
load("C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Salario_Data.csv")
#entranamiento
entrenamiento_enviar = subset(dataset, split ==TRUE)
# Ajustar el modelo de regresionj lineal simple con el conjunto de entrenaimiento
regresar = lm(formula = Salary ~ YearsExperience, data = entrenamiento_enviar) #se tiene que parecer las variables del dataset = YearsExperience
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R')
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R')
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R')
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
# Ajustar el modelo de regresionj lineal simple con el conjunto de entrenaimiento
regresar = lm(formula = Salary ~ YearsExperience, data = entrenamiento_enviar) #se tiene que parecer las variables del dataset = YearsExperience
# Ajustar el modelo de regresionj lineal simple con el conjunto de entrenaimiento
regresar = lm(formula = Salary ~ YearsExperience, data = entrenamiento_enviar) #se tiene que parecer las variables del dataset = YearsExperience
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
# Ajustar el modelo de regresionj lineal simple con el conjunto de entrenaimiento
regresar = lm(formula = Salary ~ YearsExperience, data = entrenamiento_enviar) #se tiene que parecer las variables del dataset = YearsExperience
library(caTools)
library(caTools)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
library(caTools)
dataset = read.csv('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Salario_Data.csv')
dataset = read.csv('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Salario_Data.csv')
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
library(caTools)
set.seed(123)
set.seed(123)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
View(y_prediccion)
View(y_prediccion)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
View(y_prediccion)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
View(y_prediccion)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
View(y_prediccion)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
View(y_prediccion)
# Conjunto de entrenamiento (datos donde split es TRUE)
entrenamiento_enviar = subset(dataset, split == TRUE)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
# Conjunto de entrenamiento (datos donde split es TRUE)
entrenamiento_enviar = subset(dataset, split == TRUE)
source('C:/Users/david/Music/MachingLearning/Problemas/2-ejercicio/Problemas_simple_lineal.R', echo=TRUE)
View(y_prediccion)
install.packages("ggplot2")
library(ggplot2)
library(ggplot2)
packageVersion("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Users/david/AppData/Local/R/win-library/4.4")
install.packages("ggplot2")
install.packages("ggplot2")
